//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace process.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/WcfService")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        process.ServiceReference1.CompositeType GetDataUsingDataContract(process.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<process.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(process.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertToDB", ReplyAction="http://tempuri.org/IService1/InsertToDBResponse")]
        process.ServiceReference1.InsertToDBResponse InsertToDB(process.ServiceReference1.InsertToDBRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertToDB", ReplyAction="http://tempuri.org/IService1/InsertToDBResponse")]
        System.Threading.Tasks.Task<process.ServiceReference1.InsertToDBResponse> InsertToDBAsync(process.ServiceReference1.InsertToDBRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/StopApplication", ReplyAction="http://tempuri.org/IService1/StopApplicationResponse")]
        process.ServiceReference1.StopApplicationResponse StopApplication(process.ServiceReference1.StopApplicationRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/StopApplication", ReplyAction="http://tempuri.org/IService1/StopApplicationResponse")]
        System.Threading.Tasks.Task<process.ServiceReference1.StopApplicationResponse> StopApplicationAsync(process.ServiceReference1.StopApplicationRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllLogs", ReplyAction="http://tempuri.org/IService1/GetAllLogsResponse")]
        System.Collections.Generic.List<Entity.ProcessObject> GetAllLogs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllLogs", ReplyAction="http://tempuri.org/IService1/GetAllLogsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Entity.ProcessObject>> GetAllLogsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveScreenShot", ReplyAction="http://tempuri.org/IService1/SaveScreenShotResponse")]
        void SaveScreenShot(System.Drawing.Bitmap scrnShot, Entity.ImgObject imgObj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveScreenShot", ReplyAction="http://tempuri.org/IService1/SaveScreenShotResponse")]
        System.Threading.Tasks.Task SaveScreenShotAsync(System.Drawing.Bitmap scrnShot, Entity.ImgObject imgObj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLogsWithPercentageCal", ReplyAction="http://tempuri.org/IService1/GetLogsWithPercentageCalResponse")]
        System.Collections.Generic.List<Entity.ProcessInfo> GetLogsWithPercentageCal(System.DateTime dt1, System.DateTime dt2, int UId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLogsWithPercentageCal", ReplyAction="http://tempuri.org/IService1/GetLogsWithPercentageCalResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Entity.ProcessInfo>> GetLogsWithPercentageCalAsync(System.DateTime dt1, System.DateTime dt2, int UId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getImages", ReplyAction="http://tempuri.org/IService1/getImagesResponse")]
        System.Collections.Generic.List<Entity.ImgObject> getImages(int Uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getImages", ReplyAction="http://tempuri.org/IService1/getImagesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Entity.ImgObject>> getImagesAsync(int Uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllProecss", ReplyAction="http://tempuri.org/IService1/getAllProecssResponse")]
        System.Collections.Generic.List<Entity.ProcessObject> getAllProecss();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllProecss", ReplyAction="http://tempuri.org/IService1/getAllProecssResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Entity.ProcessObject>> getAllProecssAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getDataByDate", ReplyAction="http://tempuri.org/IService1/getDataByDateResponse")]
        System.Collections.Generic.List<Entity.ProcessObject> getDataByDate(System.DateTime dt1, System.DateTime dt2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getDataByDate", ReplyAction="http://tempuri.org/IService1/getDataByDateResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Entity.ProcessObject>> getDataByDateAsync(System.DateTime dt1, System.DateTime dt2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getDataById", ReplyAction="http://tempuri.org/IService1/getDataByIdResponse")]
        System.Collections.Generic.List<Entity.ProcessObject> getDataById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getDataById", ReplyAction="http://tempuri.org/IService1/getDataByIdResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Entity.ProcessObject>> getDataByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetScreenShotsByDate_Id", ReplyAction="http://tempuri.org/IService1/GetScreenShotsByDate_IdResponse")]
        System.Collections.Generic.List<Entity.ImgObject> GetScreenShotsByDate_Id(System.DateTime dt1, System.DateTime dt2, int uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetScreenShotsByDate_Id", ReplyAction="http://tempuri.org/IService1/GetScreenShotsByDate_IdResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Entity.ImgObject>> GetScreenShotsByDate_IdAsync(System.DateTime dt1, System.DateTime dt2, int uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetApplication", ReplyAction="http://tempuri.org/IService1/GetApplicationResponse")]
        System.Collections.Generic.List<Entity.ApplicationObject> GetApplication();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetApplication", ReplyAction="http://tempuri.org/IService1/GetApplicationResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Entity.ApplicationObject>> GetApplicationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateApplicationData", ReplyAction="http://tempuri.org/IService1/UpdateApplicationDataResponse")]
        bool UpdateApplicationData(System.Collections.Generic.List<string> s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateApplicationData", ReplyAction="http://tempuri.org/IService1/UpdateApplicationDataResponse")]
        System.Threading.Tasks.Task<bool> UpdateApplicationDataAsync(System.Collections.Generic.List<string> s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataForChart", ReplyAction="http://tempuri.org/IService1/GetDataForChartResponse")]
        System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, double>> GetDataForChart(System.DateTime dt1, System.DateTime dt2, int uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataForChart", ReplyAction="http://tempuri.org/IService1/GetDataForChartResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, double>>> GetDataForChartAsync(System.DateTime dt1, System.DateTime dt2, int uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Login", ReplyAction="http://tempuri.org/IService1/LoginResponse")]
        bool Login(string u, string p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Login", ReplyAction="http://tempuri.org/IService1/LoginResponse")]
        System.Threading.Tasks.Task<bool> LoginAsync(string u, string p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdatePassword", ReplyAction="http://tempuri.org/IService1/UpdatePasswordResponse")]
        bool UpdatePassword(string pp, string np);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdatePassword", ReplyAction="http://tempuri.org/IService1/UpdatePasswordResponse")]
        System.Threading.Tasks.Task<bool> UpdatePasswordAsync(string pp, string np);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertData", ReplyAction="http://tempuri.org/IService1/InsertDataResponse")]
        bool InsertData(System.Collections.Generic.List<string> lst, System.Drawing.Bitmap b, string img);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertData", ReplyAction="http://tempuri.org/IService1/InsertDataResponse")]
        System.Threading.Tasks.Task<bool> InsertDataAsync(System.Collections.Generic.List<string> lst, System.Drawing.Bitmap b, string img);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertToDB", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InsertToDBRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public Entity.ProcessObject pD;
        
        public InsertToDBRequest() {
        }
        
        public InsertToDBRequest(Entity.ProcessObject pD) {
            this.pD = pD;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InsertToDBResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class InsertToDBResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool InsertToDBResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public Entity.ProcessObject pD;
        
        public InsertToDBResponse() {
        }
        
        public InsertToDBResponse(bool InsertToDBResult, Entity.ProcessObject pD) {
            this.InsertToDBResult = InsertToDBResult;
            this.pD = pD;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="StopApplication", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class StopApplicationRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public Entity.ProcessObject p;
        
        public StopApplicationRequest() {
        }
        
        public StopApplicationRequest(Entity.ProcessObject p) {
            this.p = p;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="StopApplicationResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class StopApplicationResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public Entity.ProcessObject p;
        
        public StopApplicationResponse() {
        }
        
        public StopApplicationResponse(Entity.ProcessObject p) {
            this.p = p;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : process.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<process.ServiceReference1.IService1>, process.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(string value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(string value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public process.ServiceReference1.CompositeType GetDataUsingDataContract(process.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<process.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(process.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        process.ServiceReference1.InsertToDBResponse process.ServiceReference1.IService1.InsertToDB(process.ServiceReference1.InsertToDBRequest request) {
            return base.Channel.InsertToDB(request);
        }
        
        public bool InsertToDB(ref Entity.ProcessObject pD) {
            process.ServiceReference1.InsertToDBRequest inValue = new process.ServiceReference1.InsertToDBRequest();
            inValue.pD = pD;
            process.ServiceReference1.InsertToDBResponse retVal = ((process.ServiceReference1.IService1)(this)).InsertToDB(inValue);
            pD = retVal.pD;
            return retVal.InsertToDBResult;
        }
        
        public System.Threading.Tasks.Task<process.ServiceReference1.InsertToDBResponse> InsertToDBAsync(process.ServiceReference1.InsertToDBRequest request) {
            return base.Channel.InsertToDBAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        process.ServiceReference1.StopApplicationResponse process.ServiceReference1.IService1.StopApplication(process.ServiceReference1.StopApplicationRequest request) {
            return base.Channel.StopApplication(request);
        }
        
        public void StopApplication(ref Entity.ProcessObject p) {
            process.ServiceReference1.StopApplicationRequest inValue = new process.ServiceReference1.StopApplicationRequest();
            inValue.p = p;
            process.ServiceReference1.StopApplicationResponse retVal = ((process.ServiceReference1.IService1)(this)).StopApplication(inValue);
            p = retVal.p;
        }
        
        public System.Threading.Tasks.Task<process.ServiceReference1.StopApplicationResponse> StopApplicationAsync(process.ServiceReference1.StopApplicationRequest request) {
            return base.Channel.StopApplicationAsync(request);
        }
        
        public System.Collections.Generic.List<Entity.ProcessObject> GetAllLogs() {
            return base.Channel.GetAllLogs();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Entity.ProcessObject>> GetAllLogsAsync() {
            return base.Channel.GetAllLogsAsync();
        }
        
        public void SaveScreenShot(System.Drawing.Bitmap scrnShot, Entity.ImgObject imgObj) {
            base.Channel.SaveScreenShot(scrnShot, imgObj);
        }
        
        public System.Threading.Tasks.Task SaveScreenShotAsync(System.Drawing.Bitmap scrnShot, Entity.ImgObject imgObj) {
            return base.Channel.SaveScreenShotAsync(scrnShot, imgObj);
        }
        
        public System.Collections.Generic.List<Entity.ProcessInfo> GetLogsWithPercentageCal(System.DateTime dt1, System.DateTime dt2, int UId) {
            return base.Channel.GetLogsWithPercentageCal(dt1, dt2, UId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Entity.ProcessInfo>> GetLogsWithPercentageCalAsync(System.DateTime dt1, System.DateTime dt2, int UId) {
            return base.Channel.GetLogsWithPercentageCalAsync(dt1, dt2, UId);
        }
        
        public System.Collections.Generic.List<Entity.ImgObject> getImages(int Uid) {
            return base.Channel.getImages(Uid);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Entity.ImgObject>> getImagesAsync(int Uid) {
            return base.Channel.getImagesAsync(Uid);
        }
        
        public System.Collections.Generic.List<Entity.ProcessObject> getAllProecss() {
            return base.Channel.getAllProecss();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Entity.ProcessObject>> getAllProecssAsync() {
            return base.Channel.getAllProecssAsync();
        }
        
        public System.Collections.Generic.List<Entity.ProcessObject> getDataByDate(System.DateTime dt1, System.DateTime dt2) {
            return base.Channel.getDataByDate(dt1, dt2);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Entity.ProcessObject>> getDataByDateAsync(System.DateTime dt1, System.DateTime dt2) {
            return base.Channel.getDataByDateAsync(dt1, dt2);
        }
        
        public System.Collections.Generic.List<Entity.ProcessObject> getDataById(int id) {
            return base.Channel.getDataById(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Entity.ProcessObject>> getDataByIdAsync(int id) {
            return base.Channel.getDataByIdAsync(id);
        }
        
        public System.Collections.Generic.List<Entity.ImgObject> GetScreenShotsByDate_Id(System.DateTime dt1, System.DateTime dt2, int uid) {
            return base.Channel.GetScreenShotsByDate_Id(dt1, dt2, uid);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Entity.ImgObject>> GetScreenShotsByDate_IdAsync(System.DateTime dt1, System.DateTime dt2, int uid) {
            return base.Channel.GetScreenShotsByDate_IdAsync(dt1, dt2, uid);
        }
        
        public System.Collections.Generic.List<Entity.ApplicationObject> GetApplication() {
            return base.Channel.GetApplication();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Entity.ApplicationObject>> GetApplicationAsync() {
            return base.Channel.GetApplicationAsync();
        }
        
        public bool UpdateApplicationData(System.Collections.Generic.List<string> s) {
            return base.Channel.UpdateApplicationData(s);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateApplicationDataAsync(System.Collections.Generic.List<string> s) {
            return base.Channel.UpdateApplicationDataAsync(s);
        }
        
        public System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, double>> GetDataForChart(System.DateTime dt1, System.DateTime dt2, int uid) {
            return base.Channel.GetDataForChart(dt1, dt2, uid);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, double>>> GetDataForChartAsync(System.DateTime dt1, System.DateTime dt2, int uid) {
            return base.Channel.GetDataForChartAsync(dt1, dt2, uid);
        }
        
        public bool Login(string u, string p) {
            return base.Channel.Login(u, p);
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(string u, string p) {
            return base.Channel.LoginAsync(u, p);
        }
        
        public bool UpdatePassword(string pp, string np) {
            return base.Channel.UpdatePassword(pp, np);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePasswordAsync(string pp, string np) {
            return base.Channel.UpdatePasswordAsync(pp, np);
        }
        
        public bool InsertData(System.Collections.Generic.List<string> lst, System.Drawing.Bitmap b, string img) {
            return base.Channel.InsertData(lst, b, img);
        }
        
        public System.Threading.Tasks.Task<bool> InsertDataAsync(System.Collections.Generic.List<string> lst, System.Drawing.Bitmap b, string img) {
            return base.Channel.InsertDataAsync(lst, b, img);
        }
    }
}
